/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,12],$V2=[1,42],$V3=[1,24],$V4=[1,14],$V5=[1,25],$V6=[1,37],$V7=[1,15],$V8=[1,16],$V9=[1,26],$Va=[1,27],$Vb=[1,29],$Vc=[1,30],$Vd=[1,28],$Ve=[1,38],$Vf=[1,36],$Vg=[1,19],$Vh=[1,20],$Vi=[1,41],$Vj=[1,32],$Vk=[1,31],$Vl=[1,23],$Vm=[1,21],$Vn=[1,22],$Vo=[1,33],$Vp=[1,35],$Vq=[1,34],$Vr=[1,39],$Vs=[1,18],$Vt=[1,17],$Vu=[1,40],$Vv=[2,5,9,10,11,15,16,18,20,21,23,30,32,36,39,43],$Vw=[2,9,11],$Vx=[5,11],$Vy=[1,82],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,106],$VK=[1,104],$VL=[1,105],$VM=[1,110],$VN=[1,108],$VO=[1,109],$VP=[1,115],$VQ=[1,113],$VR=[1,114],$VS=[1,119],$VT=[1,117],$VU=[1,118],$VV=[15,16,18,20,21,23],$VW=[1,136],$VX=[1,131],$VY=[1,132],$VZ=[1,135],$V_=[1,134],$V$=[1,133],$V01=[1,142],$V11=[1,144],$V21=[1,143],$V31=[1,147],$V41=[1,146],$V51=[1,145],$V61=[10,32],$V71=[1,166],$V81=[2,46],$V91=[1,177],$Va1=[1,176],$Vb1=[10,15,30,32,36,39],$Vc1=[1,181],$Vd1=[1,206],$Ve1=[2,72],$Vf1=[30,43],$Vg1=[1,208];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Java":3,"Inicio":4,"EOF":5,"IMP":6,"Clase":7,"ERRORES":8,"import":9,"PTC":10,"class":11,"IdVar":12,"LLA":13,"Instrucciones":14,"LLC":15,"String":16,"VALORSTRING":17,"int":18,"VALORNUMERO":19,"double":20,"char":21,"VALORCHAR":22,"boolean":23,"VALORBOOLEAN":24,"Igual":25,"TXT":26,"null":27,"PA":28,"ListaVarEnFun":29,"PC":30,"ININSTRUCCIONES":31,"MAS":32,"TEXTO":33,"Numero":34,"OPERACION":35,"Operador":36,"OP":37,"CA":38,"CC":39,"TEXTCHAR":40,"true":41,"false":42,"COMA":43,"CONDICIONES":44,"LOGICOS":45,"InCondiciones":46,"VALC":47,"COND":48,"!":49,"ERRLEX":50,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"import",10:"PTC",11:"class",12:"IdVar",13:"LLA",15:"LLC",16:"String",18:"int",20:"double",21:"char",23:"boolean",25:"Igual",27:"null",28:"PA",30:"PC",32:"MAS",33:"TEXTO",34:"Numero",36:"Operador",38:"CA",39:"CC",40:"TEXTCHAR",41:"true",42:"false",43:"COMA",45:"LOGICOS",48:"COND",49:"!",50:"ERRLEX"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,3],[6,2],[6,2],[7,6],[7,5],[7,5],[7,4],[7,2],[14,4],[14,4],[14,4],[14,4],[14,4],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[17,3],[17,3],[17,6],[17,5],[17,2],[26,3],[26,3],[26,1],[26,1],[19,3],[19,3],[19,3],[19,6],[19,5],[19,2],[35,3],[35,3],[35,1],[35,2],[37,3],[37,3],[37,3],[37,1],[37,2],[37,2],[37,2],[22,3],[22,3],[22,6],[22,5],[22,2],[24,3],[24,3],[24,3],[24,6],[24,5],[24,2],[29,4],[29,4],[29,4],[29,4],[29,4],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[31,0],[31,2],[44,3],[44,3],[44,5],[44,5],[44,1],[46,4],[46,4],[46,4],[46,3],[46,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,2],[47,2],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$
break;
case 2:
this.$=JSON.stringify({NodoI:"IMP",ASTNodeI:[JSON.parse($$[$0-1])],NodoE:"Clase",ASTNodeE:[JSON.parse($$[$0])],NodoD:"ε",ASTNodeD:[]})
break;
case 3:
this.$=JSON.stringify({NodoI:"CLASE",ASTNodeI:[JSON.parse($$[$0])],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]})
break;
case 4: case 7: case 12: case 23: case 28: case 38: case 42: case 49: case 54: case 60: case 71: case 73:
this.$=JSON.stringify({NodoI:"ε",ASTNodeI:[],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]}); a=new ERRORES.ERRORES($$[$0],this._$.first_column,this._$.first_line,"SINTACTICO");GLOBALES.Globales.ERR.push(a);
break;
case 5:
this.$=JSON.stringify({NodoI:"IMP",ASTNodeI:[JSON.parse($$[$0-2])],NodoE:$$[$0-1],ASTNodeE:[],NodoD:$$[$0],ASTNodeD:[]})
break;
case 6:
this.$=JSON.stringify({NodoI:$$[$0-1],ASTNodeI:[],NodoE:$$[$0],ASTNodeE:[],NodoD:"ε",ASTNodeD:[]})
break;
case 8:
this.$=JSON.stringify({NodoI:$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2],ASTNodeI:[JSON.parse($$[$0-5])],NodoE:"Instrucciones",ASTNodeE:[JSON.parse($$[$0-1])],NodoD:$$[$0],ASTNodeD:[]})
break;
case 9:
this.$=JSON.stringify({NodoI:$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1],ASTNodeI:[JSON.parse($$[$0-4])],NodoE:"Instrucciones",ASTNodeE:[JSON.parse($$[$0])],NodoD:$$[$01],ASTNodeD:[]})
break;
case 10:
this.$=JSON.stringify({NodoI:$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2],ASTNodeI:[],NodoE:"Instrucciones",ASTNodeE:[JSON.parse($$[$0-1])],NodoD:$$[$0],ASTNodeD:[]})
break;
case 11:
this.$=JSON.stringify({NodoI:$$[$0-3]+" "+$$[$0-2],ASTNodeI:[],NodoE:$$[$0-1],ASTNodeE:[],NodoD:$$[$0],ASTNodeD:[]})
break;
case 13:
this.$=JSON.stringify({NodoI:"INSTRUCCIONES",ASTNodeI:[JSON.parse($$[$0-3])],NodoE:$$[$0-2]+""+$$[$0-1],ASTNodeE:[],NodoD:"VALORSTRING",ASTNodeD:[JSON.parse($$[$0])]});
break;
case 14: case 15:
this.$=JSON.stringify({NodoI:"INSTRUCCIONES",ASTNodeI:[JSON.parse($$[$0-3])],NodoE:$$[$0-2]+""+$$[$0-1],ASTNodeE:[],NodoD:"VALORNUMERO",ASTNodeD:[JSON.parse($$[$0])]});
break;
case 16:
this.$=JSON.stringify({NodoI:"INSTRUCCIONES",ASTNodeI:[JSON.parse($$[$0-3])],NodoE:$$[$0-2]+""+$$[$0-1],ASTNodeE:[],NodoD:"VALORCHAR",ASTNodeD:[JSON.parse($$[$0])]});
break;
case 17:
this.$=JSON.stringify({NodoI:"INSTRUCCIONES",ASTNodeI:[JSON.parse($$[$0-3])],NodoE:$$[$0-2]+""+$$[$0-1],ASTNodeE:[],NodoD:"VALORBOOLEAN",ASTNodeD:[JSON.parse($$[$0])]});
break;
case 18:
this.$=JSON.stringify({NodoI:$$[$0-2]+""+$$[$0-1],ASTNodeI:[],NodoE:"VALORSTRING",ASTNodeE:[JSON.parse($$[$0])],NodoD:"ε",ASTNodeD:[]});
break;
case 19: case 20:
this.$=JSON.stringify({NodoI:$$[$0-2]+""+$$[$0-1],ASTNodeI:[],NodoE:"VALORNUMERO",ASTNodeE:[JSON.parse($$[$0])],NodoD:"ε",ASTNodeD:[]});
break;
case 21:
this.$=JSON.stringify({NodoI:$$[$0-2]+""+$$[$0-1],ASTNodeI:[],NodoE:"VALORCHAR",ASTNodeE:[JSON.parse($$[$0])],NodoD:"ε",ASTNodeD:[]});
break;
case 22:
this.$=JSON.stringify({NodoI:$$[$0-2]+""+$$[$0-1],ASTNodeI:[],NodoE:"VALORBOOLEAN",ASTNodeE:[JSON.parse($$[$0])],NodoD:"ε",ASTNodeD:[]});
break;
case 24: case 25: case 33: case 35: case 50: case 51: case 55: case 56: case 57:
this.$=JSON.stringify({NodoI:$$[$0-2],ASTNodeI:[],NodoE:$$[$0-1],ASTNodeE:[],NodoD:$$[$0],ASTNodeD:[]});
break;
case 26: case 36: case 52: case 58:
this.$=JSON.stringify({NodoI:$$[$0-5]+" "+$$[$0-3]+" "+$$[$0-2],ASTNodeI:[JSON.parse($$[$0-4])],NodoE:"ININSTRUCCIONES",ASTNodeE:[JSON.parse($$[$0-1])],NodoD:$$[$0],ASTNodeD:[]});
break;
case 27: case 37: case 53: case 59:
this.$=JSON.stringify({NodoI:$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2],ASTNodeI:[],NodoE:"ININSTRUCCIONES",ASTNodeE:[JSON.parse($$[$0-1])],NodoD:$$[$0],ASTNodeD:[]});
break;
case 29: case 30: case 74: case 75: case 82:
this.$=$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 31: case 32: case 78: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 92: case 93: case 94:
this.$=$$[$0];
break;
case 34: case 43: case 44: case 45:
this.$=JSON.stringify({NodoI:$$[$0-2],ASTNodeI:[],NodoE:"OPERACION",ASTNodeE:[JSON.parse($$[$0-1])],NodoD:$$[$0],ASTNodeD:[]});
break;
case 39: case 40:
this.$=JSON.stringify({NodoI:"OPERACION",ASTNodeI:[JSON.parse($$[$0-2])],NodoE:$$[$0-1],ASTNodeE:[],NodoD:"OP",ASTNodeD:[JSON.parse($$[$0])]});
break;
case 41:
this.$=JSON.stringify({NodoI:"OP",ASTNodeI:[JSON.parse($$[$0])],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]});
break;
case 46:
this.$=JSON.stringify({NodoI:$$[$0],ASTNodeI:[],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]});
break;
case 47: case 48: case 66: case 67: case 68: case 69: case 70:
this.$=JSON.stringify({NodoI:$$[$0-1],ASTNodeI:[],NodoE:$$[$0],ASTNodeE:[],NodoD:"ε",ASTNodeD:[]});
break;
case 61: case 62: case 63: case 64: case 65:
this.$=JSON.stringify({NodoI:"LISTAVARFUN",ASTNodeI:[JSON.parse($$[$0-3])],NodoE:$$[$0-1],ASTNodeE:[],NodoD:$$[$0],ASTNodeD:[]});
break;
case 72:
this.$=JSON.stringify({NodoI:"ε",ASTNodeI:[],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]});
break;
case 76: case 77:
this.$=$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 79: case 80: case 81:
this.$=$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0];
break;
case 90: case 91: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 120:
a=new ERRORES.ERRORES(this.$,this._$.first_column,this._$.first_line,"SINTACTICO");GLOBALES.Globales.ERR.push(a);return JSON.stringify({NodoI:"ε",ASTNodeI:[],NodoE:"ε",ASTNodeE:[],NodoD:"ε",ASTNodeD:[]});
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,9:[1,6],11:$V0},{1:[3]},{5:[1,8]},{2:[1,11],7:9,9:[1,10],11:$V0},{5:[2,3],11:$V1},{5:$V2,8:13,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{10:[1,43]},{12:[1,44]},{1:[2,1]},{5:[2,2],11:$V1},{10:[1,45]},{5:$V2,8:46,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{12:[1,47]},o([2,5,9,11],[2,4]),o($Vv,[2,92]),o($Vv,[2,93]),o($Vv,[2,94]),{5:$V2,8:48,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:49,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:50,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:51,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:52,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:53,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:54,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:55,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:56,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:57,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:58,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:59,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:60,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:61,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:62,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:63,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:64,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:65,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:66,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:67,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:68,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:69,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:70,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:71,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{5:$V2,8:72,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($Vv,[2,120]),o($Vw,[2,6]),{13:[1,73]},o($Vw,[2,5]),o($Vx,[2,12]),{13:[1,74]},o($Vv,[2,95]),o($Vv,[2,96]),o($Vv,[2,97]),o($Vv,[2,98]),o($Vv,[2,99]),o($Vv,[2,100]),o($Vv,[2,101]),o($Vv,[2,102]),o($Vv,[2,103]),o($Vv,[2,104]),o($Vv,[2,105]),o($Vv,[2,106]),o($Vv,[2,107]),o($Vv,[2,108]),o($Vv,[2,109]),o($Vv,[2,110]),o($Vv,[2,111]),o($Vv,[2,112]),o($Vv,[2,113]),o($Vv,[2,114]),o($Vv,[2,115]),o($Vv,[2,116]),o($Vv,[2,117]),o($Vv,[2,118]),o($Vv,[2,119]),{2:$Vy,14:75,15:[1,76],16:$Vz,18:$VA,20:$VB,21:$VC,23:$VD},{2:$Vy,14:83,15:[1,84],16:$Vz,18:$VA,20:$VB,21:$VC,23:$VD},{15:[1,85],16:$VE,18:$VF,20:$VG,21:$VH,23:$VI},o($Vx,[2,11]),{12:[1,91]},{12:[1,92]},{12:[1,93]},{12:[1,94]},{12:[1,95]},{5:$V2,8:96,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{15:[1,97],16:$VE,18:$VF,20:$VG,21:$VH,23:$VI},o($Vx,[2,9]),o($Vx,[2,10]),{12:[1,98]},{12:[1,99]},{12:[1,100]},{12:[1,101]},{12:[1,102]},{2:$VJ,17:103,25:$VK,28:$VL},{2:$VM,19:107,25:$VN,28:$VO},{2:$VM,19:111,25:$VN,28:$VO},{2:$VP,22:112,25:$VQ,28:$VR},{2:$VS,24:116,25:$VT,28:$VU},o($VV,[2,23]),o($Vx,[2,8]),{2:$VJ,17:120,25:$VK,28:$VL},{2:$VM,19:121,25:$VN,28:$VO},{2:$VM,19:122,25:$VN,28:$VO},{2:$VP,22:123,25:$VQ,28:$VR},{2:$VS,24:124,25:$VT,28:$VU},o($VV,[2,18]),{12:[1,128],26:125,27:[1,126],33:[1,127]},{2:$VW,16:$VX,18:$VY,20:$VZ,21:$V_,23:$V$,29:129,30:[1,130]},{5:$V2,8:137,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($VV,[2,19]),{2:$V01,13:$V11,27:[1,140],28:$V21,32:$V31,34:[1,138],35:139,36:$V41,37:141,38:$V51},{2:$VW,16:$VX,18:$VY,20:$VZ,21:$V_,23:$V$,29:148,30:[1,149]},{5:$V2,8:150,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($VV,[2,20]),o($VV,[2,21]),{27:[1,152],40:[1,151]},{2:$VW,16:$VX,18:$VY,20:$VZ,21:$V_,23:$V$,29:153,30:[1,154]},{5:$V2,8:155,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($VV,[2,22]),{27:[1,158],41:[1,156],42:[1,157]},{2:$VW,16:$VX,18:$VY,20:$VZ,21:$V_,23:$V$,29:159,30:[1,160]},{5:$V2,8:161,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($VV,[2,13]),o($VV,[2,14]),o($VV,[2,15]),o($VV,[2,16]),o($VV,[2,17]),{10:[1,162],32:[1,163]},{10:[1,164]},o($V61,[2,31]),o($V61,[2,32]),{30:[1,165],43:$V71},{13:[1,167]},{12:[1,168]},{12:[1,169]},{12:[1,170]},{12:[1,171]},{12:[1,172]},{5:$V2,8:173,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($VV,[2,28]),o([32,36],$V81,{10:[1,174]}),{10:[1,175],32:$V91,36:$Va1},{10:[1,178]},o($Vb1,[2,41]),{5:$V2,8:179,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},{2:$V01,13:$V11,28:$V21,32:$V31,34:$Vc1,35:180,36:$V41,37:141,38:$V51},{2:$V01,13:$V11,28:$V21,32:$V31,34:$Vc1,35:182,36:$V41,37:141,38:$V51},{2:$V01,13:$V11,28:$V21,32:$V31,34:$Vc1,35:183,36:$V41,37:141,38:$V51},{34:[1,184]},{34:[1,185]},{30:[1,186],43:$V71},{13:[1,187]},o($VV,[2,38]),{10:[1,188]},{10:[1,189]},{30:[1,190],43:$V71},{13:[1,191]},o($VV,[2,54]),{10:[1,192]},{10:[1,193]},{10:[1,194]},{30:[1,195],43:$V71},{13:[1,196]},o($VV,[2,60]),o($VV,[2,24]),{12:[1,197],33:[1,198]},o($VV,[2,25]),{13:[1,199]},{16:[1,200],18:[1,201],20:[1,204],21:[1,203],23:[1,202]},{2:$Vd1,15:$Ve1,31:205},o($Vf1,[2,66]),o($Vf1,[2,67]),o($Vf1,[2,68]),o($Vf1,[2,69]),o($Vf1,[2,70]),o($Vf1,[2,71]),o($VV,[2,33]),o($VV,[2,34]),{2:$Vg1,13:$V11,28:$V21,32:$V31,34:$Vc1,36:$V41,37:207,38:$V51},{2:$Vg1,13:$V11,28:$V21,32:$V31,34:$Vc1,36:$V41,37:209,38:$V51},o($VV,[2,35]),o($Vb1,[2,42]),{30:[1,210],32:$V91,36:$Va1},o($Vb1,$V81),{15:[1,211],32:$V91,36:$Va1},{32:$V91,36:$Va1,39:[1,212]},o($Vb1,[2,47]),o($Vb1,[2,48]),{13:[1,213]},{2:$Vd1,15:$Ve1,31:214},o($VV,[2,50]),o($VV,[2,51]),{13:[1,215]},{2:$Vd1,15:$Ve1,31:216},o($VV,[2,55]),o($VV,[2,56]),o($VV,[2,57]),{13:[1,217]},{2:$Vd1,15:$Ve1,31:218},o($V61,[2,29]),o($V61,[2,30]),{2:$Vd1,15:$Ve1,31:219},{12:[1,220]},{12:[1,221]},{12:[1,222]},{12:[1,223]},{12:[1,224]},{15:[1,225]},{5:$V2,8:226,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($Vb1,[2,39]),{5:$V2,8:227,9:$V3,10:$V4,11:$V5,12:$V6,13:$V7,15:$V8,16:$V9,18:$Va,20:$Vb,21:$Vc,23:$Vd,25:$Ve,27:$Vf,28:$Vg,30:$Vh,32:$Vi,33:$Vj,34:$Vk,36:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,45:$Vs,48:$Vt,50:$Vu},o($Vb1,[2,40]),o($Vb1,[2,43]),o($Vb1,[2,44]),o($Vb1,[2,45]),{2:$Vd1,15:$Ve1,31:228},{15:[1,229]},{2:$Vd1,15:$Ve1,31:230},{15:[1,231]},{2:$Vd1,15:$Ve1,31:232},{15:[1,233]},{15:[1,234]},o($Vf1,[2,61]),o($Vf1,[2,62]),o($Vf1,[2,63]),o($Vf1,[2,64]),o($Vf1,[2,65]),o($VV,[2,27]),{15:[2,73]},o($Vb1,[2,49]),{15:[1,235]},o($VV,[2,37]),{15:[1,236]},o($VV,[2,53]),{15:[1,237]},o($VV,[2,59]),o($VV,[2,26]),o($VV,[2,36]),o($VV,[2,52]),o($VV,[2,58])],
defaultActions: {8:[2,1],226:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const GLOBALES=require('./build/Globales');
const ERRORES=require('./build/ERRORES');
const TOKENS=require('./build/TOKENS');
let a;
let b;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ESPACIO EN BLANCO*/	
break;
case 1:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 10;
break;
case 2:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 43;
break;
case 3:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 28;
break;
case 4:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 30;
break;
case 5:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 38;
break;
case 6:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 39;
break;
case 7:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 48;
break;
case 8:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 45;
break;
case 9:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 32;
break;
case 10:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 36;
break;
case 11:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 13;
break;
case 12:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 15;
break;
case 13:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 9;
break;
case 14:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 11;
break;
case 15:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 16;
break;
case 16:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 18;
break;
case 17:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 23;
break;
case 18:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 20;
break;
case 19:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 21;
break;
case 20:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 34;
break;
case 21:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 33;
break;
case 22:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 40;
break;
case 23:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 42;
break;
case 24:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 41;
break;
case 25:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 27;
break;
case 26:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 12;
break;
case 27:GLOBALES.Globales.TOK.push(new TOKENS.TOKENS(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));return 25;
break;
case 28:return 5
break;
case 29:a=new ERRORES.ERRORES(yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line,"LEXICO");GLOBALES.Globales.ERR.push(a);return 50;
break;
}
},
rules: [/^(?:\s+)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:[>|<])/,/^(?:[ && | || ])/,/^(?:\+)/,/^(?:[-|/|*|^|%])/,/^(?:\{)/,/^(?:\})/,/^(?:import(\.[a-zA-Z]+)+)/,/^(?:class\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:("([^"]|"|\n|\t|\r|\\)*"))/,/^(?:'.')/,/^(?:false\b)/,/^(?:true\b)/,/^(?:null\b)/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:=)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}